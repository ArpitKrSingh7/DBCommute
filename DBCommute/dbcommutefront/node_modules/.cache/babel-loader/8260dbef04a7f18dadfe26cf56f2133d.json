{"ast":null,"code":"// ArtyomCommands.js\nexport default class ArtyomCommandsManager {\n  // The ArtyomCommandsManager class expects as argument in the constructor\n  // an already declared instance of Artyom.js\n  constructor(ArtyomInstance) {\n    this.speak = xyz => {\n      // Check if speaking\n      console.log(this.state);\n      const synth = window.speechSynthesis;\n\n      if (synth.speaking) {\n        console.error('Already speaking...');\n        return;\n      } // Get speak text\n\n\n      const speakText = new SpeechSynthesisUtterance(xyz); // Speak end\n\n      speakText.onend = e => {\n        console.log('Done speaking...');\n      }; // Speak error\n\n\n      speakText.onerror = e => {\n        console.error('Something went wrong');\n      }; // Speak\n\n\n      synth.speak(speakText);\n    };\n\n    this._artyom = ArtyomInstance;\n  }\n\n  // Execute the loadCommands method to inject the methods to the instance of Artyom\n  loadCommands() {\n    let Artyom = this._artyom; // Here you can load all the commands that you want to Artyom\n\n    return Artyom.addCommands([{\n      indexes: [\"Hello\", \"Hi\"],\n      action: () => {\n        Artyom.say(\"Hello, how are you?\");\n      }\n    }, {\n      indexes: [\"Change Route\"],\n      action: () => {\n        this.speak(\"Tell Route to change to\");\n        var xyz = prompt(\"Enter Route:\");\n        alert(xyz);\n      }\n    }, {\n      indexes: [/How are you/, /Regular expressions supported/],\n      smart: true,\n      action: () => {\n        Artyom.say(\"I'm fine, thanks for asking !\");\n      }\n    }, {\n      indexes: [\"Generate reports of * of this year\"],\n      smart: true,\n      action: (i, month) => {\n        let year = new Date().getFullYear();\n        Artyom.say(\"Generating reports of \".concat(month, \" \").concat(year, \" \"));\n        Artyom.say(\"Ready ! What were you expecting? write some code you lazy bear !\");\n      }\n    }]);\n  }\n\n}","map":{"version":3,"sources":["/home/arpit/Project_DBMS/Voice-based-Transport-Enquiry-System/voiceenquirysystem/src/Components/VoiceResolver/ArtyomCommands.js"],"names":["ArtyomCommandsManager","constructor","ArtyomInstance","speak","xyz","console","log","state","synth","window","speechSynthesis","speaking","error","speakText","SpeechSynthesisUtterance","onend","e","onerror","_artyom","loadCommands","Artyom","addCommands","indexes","action","say","prompt","alert","smart","i","month","year","Date","getFullYear"],"mappings":"AAAA;AACA,eAAe,MAAMA,qBAAN,CAA4B;AAEvC;AACA;AACAC,EAAAA,WAAW,CAAEC,cAAF,EAAiB;AAAA,SAI3BC,KAJ2B,GAIlBC,GAAD,IAAS;AAChB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;AACA,YAAMC,KAAK,GAAGC,MAAM,CAACC,eAArB;;AACA,UAAIF,KAAK,CAACG,QAAV,EAAoB;AAClBN,QAAAA,OAAO,CAACO,KAAR,CAAc,qBAAd;AACA;AACD,OAPe,CASd;;;AACA,YAAMC,SAAS,GAAG,IAAIC,wBAAJ,CAA6BV,GAA7B,CAAlB,CAVc,CAYd;;AACAS,MAAAA,SAAS,CAACE,KAAV,GAAkBC,CAAC,IAAI;AACrBX,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AAED,OAHD,CAbc,CAkBd;;;AACAO,MAAAA,SAAS,CAACI,OAAV,GAAoBD,CAAC,IAAI;AACvBX,QAAAA,OAAO,CAACO,KAAR,CAAc,sBAAd;AACD,OAFD,CAnBc,CAuBd;;;AACAJ,MAAAA,KAAK,CAACL,KAAN,CAAYU,SAAZ;AAEH,KA9B2B;;AACxB,SAAKK,OAAL,GAAehB,cAAf;AACH;;AA8BD;AACAiB,EAAAA,YAAY,GAAE;AACV,QAAIC,MAAM,GAAG,KAAKF,OAAlB,CADU,CAGV;;AACA,WAAOE,MAAM,CAACC,WAAP,CAAmB,CACtB;AACIC,MAAAA,OAAO,EAAE,CAAC,OAAD,EAAU,IAAV,CADb;AAEIC,MAAAA,MAAM,EAAE,MAAM;AACVH,QAAAA,MAAM,CAACI,GAAP,CAAW,qBAAX;AACH;AAJL,KADsB,EAMpB;AACEF,MAAAA,OAAO,EAAE,CAAC,cAAD,CADX;AAEEC,MAAAA,MAAM,EAAE,MAAM;AACV,aAAKpB,KAAL,CAAW,yBAAX;AACF,YAAKC,GAAG,GAACqB,MAAM,CAAC,cAAD,CAAf;AACEC,QAAAA,KAAK,CAACtB,GAAD,CAAL;AACH;AANH,KANoB,EActB;AACIkB,MAAAA,OAAO,EAAE,CAAC,aAAD,EAAgB,+BAAhB,CADb;AAEIK,MAAAA,KAAK,EAAE,IAFX;AAGIJ,MAAAA,MAAM,EAAE,MAAM;AACVH,QAAAA,MAAM,CAACI,GAAP,CAAW,+BAAX;AACH;AALL,KAdsB,EAqBtB;AACIF,MAAAA,OAAO,EAAE,CAAC,oCAAD,CADb;AAEIK,MAAAA,KAAK,EAAE,IAFX;AAGIJ,MAAAA,MAAM,EAAE,CAACK,CAAD,EAAIC,KAAJ,KAAc;AAClB,YAAIC,IAAI,GAAG,IAAIC,IAAJ,GAAWC,WAAX,EAAX;AAEAZ,QAAAA,MAAM,CAACI,GAAP,iCAAoCK,KAApC,cAA6CC,IAA7C;AAEAV,QAAAA,MAAM,CAACI,GAAP,CAAW,kEAAX;AACH;AATL,KArBsB,CAAnB,CAAP;AAiCH;;AA1EsC","sourcesContent":["// ArtyomCommands.js\nexport default class ArtyomCommandsManager {\n\n    // The ArtyomCommandsManager class expects as argument in the constructor\n    // an already declared instance of Artyom.js\n    constructor (ArtyomInstance){\n        this._artyom = ArtyomInstance;\n    }\n    \n     speak = (xyz) => {\n      // Check if speaking\n      console.log(this.state);\n      const synth = window.speechSynthesis;\n      if (synth.speaking) {\n        console.error('Already speaking...');\n        return;\n      }\n        \n        // Get speak text\n        const speakText = new SpeechSynthesisUtterance(xyz);\n\n        // Speak end\n        speakText.onend = e => {\n          console.log('Done speaking...');\n\n        };\n\n        // Speak error\n        speakText.onerror = e => {\n          console.error('Something went wrong');\n        };\n\n        // Speak\n        synth.speak(speakText);\n      \n    };\n\n    // Execute the loadCommands method to inject the methods to the instance of Artyom\n    loadCommands(){\n        let Artyom = this._artyom;\n\n        // Here you can load all the commands that you want to Artyom\n        return Artyom.addCommands([\n            {\n                indexes: [\"Hello\", \"Hi\"],\n                action: () => {\n                    Artyom.say(\"Hello, how are you?\");\n                }\n            },{\n                indexes: [\"Change Route\"],\n                action: () => {\n                    this.speak(\"Tell Route to change to\")\n                  var  xyz=prompt(\"Enter Route:\")\n                    alert(xyz);\n                }\n            },\n            {\n                indexes: [/How are you/, /Regular expressions supported/],\n                smart: true,\n                action: () => {\n                    Artyom.say(\"I'm fine, thanks for asking !\");\n                }\n            },\n            {\n                indexes: [\"Generate reports of * of this year\"],\n                smart: true,\n                action: (i, month) => {\n                    let year = new Date().getFullYear();\n                    \n                    Artyom.say(`Generating reports of ${month} ${year} `);\n\n                    Artyom.say(\"Ready ! What were you expecting? write some code you lazy bear !\");\n                }\n            },\n        ]);\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}